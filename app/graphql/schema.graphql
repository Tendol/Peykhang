type Author {
  books: [Book!]
  firstName: String
  id: ID!
  lastName: String
}

type Book {
  authors: [Author!]
  id: ID!
  isbn: String
  publishedDate: ISO8601Date
  title: String!
}

"""
The connection type for Book.
"""
type BookConnection {
  """
  A list of edges.
  """
  edges: [BookEdge]

  """
  A list of nodes.
  """
  nodes: [Book]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BookEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Book
}

"""
Autogenerated input type of CreateBook
"""
input CreateBookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  title: String
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  createBook(
    """
    Parameters for CreateBook
    """
    input: CreateBookInput!
  ): Book
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  book(id: String!): Book
  books(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookConnection

  """
  An example field added by the generator
  """
  testField: String!
}
